     1 00000000                                 [FORMAT "WCOFF"]		;制作目标文件的模式
     2 00000000                                 [INSTRSET "i486p"]		; 使用到486为止的指令
     3 00000000                                 [BITS 32]				;32位模式
     4 00000000                                 
     5 00000000                                 [FILE "AamFunc.nas"]	;源文件名
     6 00000000                                 	GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt		;程序包含的函数名
     7 00000000                                 	GLOBAL	_load_gdtr, _load_idtr
     8 00000000                                 	
     9 00000000                                 	GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    10 00000000                                 	
    11 00000000                                 	GLOBAL	_io_in8,  _io_in16,  _io_in32
    12 00000000                                 	GLOBAL	_io_out8, _io_out16, _io_out32
    13 00000000                                 	
    14 00000000                                 	GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 					
    16 00000000                                 	EXTERN	_inthandler21, _inthandler27, _inthandler2c
    17 00000000                                 	
    18 00000000                                 	
    19                                          [SECTION .text]			;目标文件写了这些 之后再写函数
    20 00000000                                 ; ---------------------------------------------------------- 
    21 00000000                                 _io_hlt:			;void io_hlt(void);
    22 00000000 F4                              	HLT
    23 00000001 C3                              	RET
    24 00000002                                 
    25 00000002                                 _io_cli:	; void io_cli(void);	; 关闭所有可屏蔽中断
    26 00000002 FA                              	CLI
    27 00000003 C3                              	RET
    28 00000004                                 
    29 00000004                                 _io_sti:	; void io_sti(void);	; 打开所有可屏蔽中断
    30 00000004 FB                              	STI
    31 00000005 C3                              	RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:	; void io_stihlt(void);	
    34 00000006 FB                              	STI
    35 00000007 F4                              	HLT
    36 00000008 C3                              	RET
    37 00000009                                 		
    38 00000009                                 ; ---------------------------------------------------------- 
    39 00000009                                 _load_gdtr:		; void load_gdtr(int limit, int addr);加载GDT，limit是GDT限长，addr是GDT基址
    40 00000009 66 8B 44 24 04                  	MOV		AX,[ESP+4]		; limit
    41 0000000E 66 89 44 24 06                  	MOV		[ESP+6],AX
    42 00000013 0F 01 54 24 06                  	LGDT	[ESP+6]
    43 00000018 C3                              	RET
    44 00000019                                 
    45 00000019                                 _load_idtr:		; void load_idtr(int limit, int addr);加载IDT
    46 00000019 66 8B 44 24 04                  	MOV		AX,[ESP+4]		; limit
    47 0000001E 66 89 44 24 06                  	MOV		[ESP+6],AX
    48 00000023 0F 01 5C 24 06                  	LIDT	[ESP+6]
    49 00000028 C3                              	RET
    50 00000029                                 		
    51 00000029                                 ; ---------------------------------------------------------- 
    52 00000029                                 ;	   主PIC					从PIC
    53 00000029                                 ;	IRQ0	时钟			IRQ8	实时钟	
    54 00000029                                 ;	IRQ1	键盘			IRQ9	INTOAH
    55 00000029                                 ;	IRQ2	接连int			IRQ10	保留
    56 00000029                                 ;	IRQ3	串行口2			IRQ11	保留		
    57 00000029                                 ;	IEQ4	串行口1			IRQ12	PS2鼠标
    58 00000029                                 ;	IEQ5	并行口2			IRQ13	协处理器
    59 00000029                                 ;	IEQ6	软盘			IRQ14	硬盘	
    60 00000029                                 ;	IEQ7	并行口1			IRQ15	保留	
    61 00000029                                 ; ----------------------------------------------------------		
    62 00000029                                 _asm_inthandler21:	; IRQ 1		键盘
    63 00000029 06                              	PUSH	ES			
    64 0000002A 1E                              	PUSH	DS
    65 0000002B 60                              	PUSHAD					; 保存寄存器
    66 0000002C 89 E0                           	MOV		EAX,ESP
    67 0000002E 50                              	PUSH	EAX
    68 0000002F 66 8C D0                        	MOV		AX,SS			; 修改DS ES SS
    69 00000032 8E D8                           	MOV		DS,AX
    70 00000034 8E C0                           	MOV		ES,AX
    71 00000036 E8 [00000000]                   	CALL	_inthandler21	; 调用处理函数
    72 0000003B 58                              	POP		EAX				; 恢复各个寄存器的值
    73 0000003C 61                              	POPAD
    74 0000003D 1F                              	POP		DS
    75 0000003E 07                              	POP		ES
    76 0000003F CF                              	IRETD					; 中断返回
    77 00000040                                 
    78 00000040                                 _asm_inthandler27:	; IRQ 7		并行口1
    79 00000040 06                              	PUSH	ES
    80 00000041 1E                              	PUSH	DS
    81 00000042 60                              	PUSHAD					; 保存寄存器
    82 00000043 89 E0                           	MOV		EAX,ESP
    83 00000045 50                              	PUSH	EAX
    84 00000046 66 8C D0                        	MOV		AX,SS			; 修改DS ES SS
    85 00000049 8E D8                           	MOV		DS,AX
    86 0000004B 8E C0                           	MOV		ES,AX
    87 0000004D E8 [00000000]                   	CALL	_inthandler27	; 调用处理函数 
    88 00000052 58                              	POP		EAX				; 恢复各个寄存器的值
    89 00000053 61                              	POPAD
    90 00000054 1F                              	POP		DS
    91 00000055 07                              	POP		ES
    92 00000056 CF                              	IRETD					; 中断返回
    93 00000057                                 
    94 00000057                                 _asm_inthandler2c:	; IRQ 12	PS2鼠标
    95 00000057 06                              	PUSH	ES
    96 00000058 1E                              	PUSH	DS
    97 00000059 60                              	PUSHAD					; 保存寄存器
    98 0000005A 89 E0                           	MOV		EAX,ESP
    99 0000005C 50                              	PUSH	EAX
   100 0000005D 66 8C D0                        	MOV		AX,SS			; 修改DS ES SS
   101 00000060 8E D8                           	MOV		DS,AX
   102 00000062 8E C0                           	MOV		ES,AX			
   103 00000064 E8 [00000000]                   	CALL	_inthandler2c	; 调用处理函数
   104 00000069 58                              	POP		EAX				; 恢复各个寄存器的值
   105 0000006A 61                              	POPAD
   106 0000006B 1F                              	POP		DS
   107 0000006C 07                              	POP		ES
   108 0000006D CF                              	IRETD					; 中断返回
   109 0000006E                                 	
   110 0000006E                                 ; ---------------------------------------------------------- 	
   111 0000006E                                 _io_in8:	; int io_in8(int port);	; 从port端口读入8位数据到AL中
   112 0000006E 8B 54 24 04                     	MOV		EDX,[ESP+4]		; port
   113 00000072 B8 00000000                     	MOV		EAX,0
   114 00000077 EC                              	IN		AL,DX
   115 00000078 C3                              	RET
   116 00000079                                 
   117 00000079                                 _io_in16:	; int io_in16(int port); ; 从port端口读入16位数据到AX中
   118 00000079 8B 54 24 04                     	MOV		EDX,[ESP+4]		; port
   119 0000007D B8 00000000                     	MOV		EAX,0
   120 00000082 66 ED                           	IN		AX,DX
   121 00000084 C3                              	RET
   122 00000085                                 
   123 00000085                                 _io_in32:	; int io_in32(int port); ; 从port端口读入32位数据到EAX中
   124 00000085 8B 54 24 04                     	MOV		EDX,[ESP+4]		; port
   125 00000089 ED                              	IN		EAX,DX
   126 0000008A C3                              	RET
   127 0000008B                                 
   128 0000008B                                 ; ---------------------------------------------------------- 		
   129 0000008B                                 _io_out8:	; void io_out8(int port, int data);		; 将8位的data输出到port端口
   130 0000008B 8B 54 24 04                     	MOV		EDX,[ESP+4]		; port
   131 0000008F 8A 44 24 08                     	MOV		AL,[ESP+8]		; data
   132 00000093 EE                              	OUT		DX,AL
   133 00000094 C3                              	RET
   134 00000095                                 
   135 00000095                                 _io_out16:	; void io_out16(int port, int data);	; 将16位的data输出到port端口
   136 00000095 8B 54 24 04                     	MOV		EDX,[ESP+4]		; port
   137 00000099 8B 44 24 08                     	MOV		EAX,[ESP+8]		; data
   138 0000009D 66 EF                           	OUT		DX,AX
   139 0000009F C3                              	RET
   140 000000A0                                 
   141 000000A0                                 _io_out32:	; void io_out32(int port, int data);	; 将32位的data输出到port端口
   142 000000A0 8B 54 24 04                     	MOV		EDX,[ESP+4]		; port
   143 000000A4 8B 44 24 08                     	MOV		EAX,[ESP+8]		; data
   144 000000A8 EF                              	OUT		DX,EAX
   145 000000A9 C3                              	RET
   146 000000AA                                 
   147 000000AA                                 ; ---------------------------------------------------------- 		
   148 000000AA                                 _io_load_eflags:	; int io_load_eflags(void);		; 将EFLAGS寄存器的内容返回
   149 000000AA 9C                              	PUSHFD		; PUSH EFLAGS 
   150 000000AB 58                              	POP		EAX	; EAX = EFLAGS
   151 000000AC C3                              	RET
   152 000000AD                                 
   153 000000AD                                 _io_store_eflags:	; void io_store_eflags(int eflags);	; 将参数eflags的内容作为EFLAGS寄存器的值
   154 000000AD 8B 44 24 04                     	MOV		EAX,[ESP+4]	
   155 000000B1 50                              	PUSH	EAX
   156 000000B2 9D                              	POPFD		; POP EFLAGS 
   157 000000B3 C3                              	RET
   158 000000B4                                 	